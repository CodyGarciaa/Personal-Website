/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useEffect } from 'react'
import { Html, Mask, useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import DL_bio from './DL_Face'
import Project_Card from './Project_Card_Face'
import Contact_Card from './Contact_Card_Face'

export default function Wallet3(props) {
  const group = useRef()
  const proj1CardRef = useRef()
  const { nodes, materials, animations } = useGLTF('/finishedwalletanimated.glb')
  console.log(materials)
  const { actions, names } = useAnimations(animations, group)
//   console.log("helping: ", nodes.Proj1Card.geometry.getAttribute("vertexGroupAttribute"));
  console.log("helping: ", nodes.Proj1Card.geometry.attributes.position.array);

  useEffect(() => {
    materials.Wallet_Material.transparent = true;
    materials.Wallet_Material.opacity = 1;

    materials.Sleeve_Material.transparent = true;
    materials.Sleeve_Material.opacity = 1;
  }, [materials])

  useFrame((state, delta) => {
    if (proj1CardRef.current) {
      proj1CardRef.current.position.x += 0.01 * delta
    }
  })

  const helper = ()  => {
    console.log('clicked wallet');
    actions[names[0]].fadeIn(0.5).play();
    actions[names[1]].fadeIn(0.5).play();

    materials.Sleeve_Material.opacity = 0.3;

    if (proj1CardRef.current) {
        proj1CardRef.current.position.set(2, 0, 0)
    }
  };

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" onClick={helper}>
        <group name="ArmatureSleeve" position={[-0.01, 0, -0.758]}>
          <skinnedMesh
            ref={proj1CardRef}
            name="Proj1Card"
            geometry={nodes.Proj1Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj1Card.skeleton}
          />
          <skinnedMesh
            name="Proj2Card"
            geometry={nodes.Proj2Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj2Card.skeleton}
          />
          <skinnedMesh
            name="Proj3Card"
            geometry={nodes.Proj3Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj3Card.skeleton}
          />
          <skinnedMesh
            name="Proj4Card"
            geometry={nodes.Proj4Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj4Card.skeleton}
          />
          <skinnedMesh
            name="Proj5Card"
            geometry={nodes.Proj5Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj5Card.skeleton}
          />
          <skinnedMesh
            name="Sleeve"
            geometry={nodes.Sleeve.geometry}
            material={materials.Sleeve_Material}
            skeleton={nodes.Sleeve.skeleton}
          />
          <primitive object={nodes.firstfold} />
          <primitive object={nodes.firstsleeve} />
        </group>
        <group
          name="ArmatureWallet"
          position={[-7.081, 0.626, -1.709]}
          rotation={[0, 0, -Math.PI / 2]}>
          <skinnedMesh
            name="BuisCard"
            geometry={nodes.BuisCard.geometry}
            material={materials.Buisness_Material}
            skeleton={nodes.BuisCard.skeleton}
          />
          <skinnedMesh
            name="DL_Card"
            geometry={nodes.DL_Card.geometry}
            material={materials.DL_Material}
            skeleton={nodes.DL_Card.skeleton}
          >
          </skinnedMesh>
          <group name="Wallet">
            <skinnedMesh
              name="Cube"
              geometry={nodes.Cube.geometry}
              material={materials.Wallet_Material}
              skeleton={nodes.Cube.skeleton}
            />
            <skinnedMesh
              name="Cube_1"
              geometry={nodes.Cube_1.geometry}
              material={materials.Sleeve_Material}
              skeleton={nodes.Cube_1.skeleton}
            />
          </group>
          <primitive object={nodes.walletstay} />
          <primitive object={nodes.walletspine}>
            <primitive object={nodes.walletopen}>
              <Mask>
                <Html
                    occlude
                    wrapperClass="nodes"
                    position={[2.4, 7, 0.7]}
                    transform
                    distanceFactor={8}
                    // rotation-x={THREE.MathUtils.degToRad(90)}
                    // rotation-y={THREE.MathUtils.degToRad(-90)}
                    rotation-z={THREE.MathUtils.degToRad(-90)}
                >
                    {/* <DL_bio /> */}
                    {/* <Project_Card /> */}
                    <Contact_Card />
                </Html>
              </Mask>
            </primitive>
          </primitive>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/finishedwalletanimated.glb')