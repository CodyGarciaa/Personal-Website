

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import '../css/Card.css'

export default function Wallet({ onWalletClick, isOpened, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/final_models/walletfinal2.glb')
  const { actions } = useAnimations(animations, group)
  const isFirstRender = useRef(true);

  useEffect( () => {
    if (isFirstRender.current) {
      console.log('first render');
      isFirstRender.current = false; // Skip the first render
      return;
    } else {
      console.log('clicked wallet')
    
      if(isOpened) {
          actions['SleeveCloseAnimation'].fadeOut(0.5)
          actions['SleeveOpenAnimation'].reset()
          actions['SleeveOpenAnimation'].setLoop(THREE.LoopOnce, 1);
          actions['SleeveOpenAnimation'].clampWhenFinished = true;
          actions['SleeveOpenAnimation'].fadeIn(0.5).play()
          console.log('opening wallet')
      } else {
          actions['SleeveOpenAnimation'].fadeOut(0.5)
          actions['SleeveCloseAnimation'].reset()
          actions['SleeveCloseAnimation'].setLoop(THREE.LoopOnce, 1);
          actions['SleeveCloseAnimation'].clampWhenFinished = true;
          actions['SleeveCloseAnimation'].fadeIn(0.5).play()
          console.log('closing wallet')
      }
    }
  }, [isOpened])

  materials.Sleeve_Material.transparent = true;
  materials.Sleeve_Material.opacity = 0.3;

  useEffect(() => {
    actions['WalletOpenAnimation'].setLoop(THREE.LoopOnce, 1);
    actions['WalletOpenAnimation'].clampWhenFinished = true;
    actions['WalletOpenAnimation'].fadeIn(0.5).play()
  }, [])

  return (
    <group ref={group} {...props} dispose={null} >
      <group name="Scene">
        <group name="ArmatureSleeve" position={[-0.01, 0, -0.758]} >
          <skinnedMesh
            name="Sleeve"
            geometry={nodes.Sleeve.geometry}
            material={materials.Sleeve_Material}
            skeleton={nodes.Sleeve.skeleton}
            onClick={isOpened ? '' : onWalletClick}
            frustumCulled={false}
          />
          <primitive object={nodes.firstfold}/>
          <primitive object={nodes.firstsleeve}/>
        </group>
        <group
          name="ArmatureWallet"
          position={[-7.081, 0.626, -1.709]}
          rotation={[0, 0, -Math.PI / 2]}>
          <skinnedMesh
            name="Dollar"
            geometry={nodes.Dollar.geometry}
            material={materials.DollarBill}
            skeleton={nodes.Dollar.skeleton}
          />
          <skinnedMesh
            name="Peso"
            geometry={nodes.Peso.geometry}
            material={materials.PesoBill}
            skeleton={nodes.Peso.skeleton}
          />
          <group name="Wallet">
          <skinnedMesh
              name="Cube"
              geometry={nodes.Cube.geometry}
              material={materials.Wallet_Material}
              skeleton={nodes.Cube.skeleton}
            />
            <skinnedMesh
              name="Cube_1"
              geometry={nodes.Cube_1.geometry}
              material={materials.EngraveName}
              skeleton={nodes.Cube_1.skeleton}
            />
            <skinnedMesh
              name="Cube_2"
              geometry={nodes.Cube_2.geometry}
              material={materials.Sleeve_Material}
              skeleton={nodes.Cube_2.skeleton}
            />
          </group>
          <primitive object={nodes.walletstay}>
            <Html
              occlude="blending"
              wrapperClass="nodes"
              position={[-2.7, 2.7, 1.5]}
              transform
              distanceFactor={7}
              rotation-x={THREE.MathUtils.degToRad(178.75)}
              rotation-z={THREE.MathUtils.degToRad(90)}
              style={{ display: isOpened ? 'block' : 'none' }}
            >
              <div className='arrow-left' onClick={onWalletClick} style={{ display: isOpened ? 'block' : 'none' }}>âž¡</div>
            </Html>

            <Html
              occlude="blending"
              wrapperClass="nodes"
              position={[-12, 1, 3]}
              transform
              distanceFactor={7}
              rotation-x={THREE.MathUtils.degToRad(-40)}
              rotation-z={THREE.MathUtils.degToRad(90)}
            >
              <div className='TitleCG' onClick={onWalletClick}>
                <h1>Cody's Portfolio!!</h1>
                <p>feel free to interact with any/all "cards" ðŸ˜‰</p>
              </div>
            </Html>

          </primitive>
          <primitive object={nodes.walletspine} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/final_models/walletfinal2.glb')

// import * as THREE from 'three'
// import React, { useEffect, useRef, useState } from 'react'
// import { useGLTF, useAnimations, Html } from '@react-three/drei'
// import '../css/Card.css'

// export default function Wallet({ onWalletClick, isOpened, ...props }) {
//   const group = useRef()
//   const { nodes, materials, animations } = useGLTF('/final_models/walletfinal.glb')
//   const { actions } = useAnimations(animations, group)
//   const isFirstRender = useRef(true);

//   useEffect( () => {
//     if (isFirstRender.current) {
//       console.log('first render');
//       isFirstRender.current = false; // Skip the first render
//       return;
//     } else {
//       console.log('clicked wallet')
    
//       if(isOpened) {
//           actions['SleeveCloseAnimation'].fadeOut(0.5)
//           actions['SleeveOpenAnimation'].reset()
//           actions['SleeveOpenAnimation'].setLoop(THREE.LoopOnce, 1);
//           actions['SleeveOpenAnimation'].clampWhenFinished = true;
//           actions['SleeveOpenAnimation'].fadeIn(0.5).play()
//           console.log('opening wallet')
//       } else {
//           actions['SleeveOpenAnimation'].fadeOut(0.5)
//           actions['SleeveCloseAnimation'].reset()
//           actions['SleeveCloseAnimation'].setLoop(THREE.LoopOnce, 1);
//           actions['SleeveCloseAnimation'].clampWhenFinished = true;
//           actions['SleeveCloseAnimation'].fadeIn(0.5).play()
//           console.log('closing wallet')
//       }
//     }
//   }, [isOpened])

//   materials.Sleeve_Material.transparent = true;
//   materials.Sleeve_Material.opacity = 0.3;

//   useEffect(() => {
//     actions['WalletOpenAnimation'].setLoop(THREE.LoopOnce, 1);
//     actions['WalletOpenAnimation'].clampWhenFinished = true;
//     actions['WalletOpenAnimation'].fadeIn(0.5).play()
//   }, [])

//   return (
//     <group ref={group} {...props} dispose={null} >
//       <group name="Scene">
//         <group name="ArmatureSleeve" position={[-0.01, 0, -0.758]} >
//           <skinnedMesh
//             name="Sleeve"
//             geometry={nodes.Sleeve.geometry}
//             material={materials.Sleeve_Material}
//             skeleton={nodes.Sleeve.skeleton}
//             onClick={isOpened ? '' : onWalletClick}
//             frustumCulled={false}
//           />
//           <primitive object={nodes.firstfold}/>
//           <primitive object={nodes.firstsleeve}/>
//         </group>
//         <group
//           name="ArmatureWallet"
//           position={[-7.081, 0.626, -1.709]}
//           rotation={[0, 0, -Math.PI / 2]}>
//           <group name="Wallet">
//             <skinnedMesh
//               name="Cube"
//               geometry={nodes.Cube.geometry}
//               material={materials.Wallet_Material}
//               skeleton={nodes.Cube.skeleton}
//             />
//             <skinnedMesh
//               name="Cube_1"
//               geometry={nodes.Cube_1.geometry}
//               material={materials.Sleeve_Material}
//               skeleton={nodes.Cube_1.skeleton}
//             />
//           </group>
//           <primitive object={nodes.walletstay}>
//             <Html
//               occlude="blending"
//               wrapperClass="nodes"
//               position={[-2.7, 2.7, 1.5]}
//               transform
//               distanceFactor={7}
//               rotation-x={THREE.MathUtils.degToRad(178.75)}
//               rotation-z={THREE.MathUtils.degToRad(90)}
//               style={{ display: isOpened ? 'block' : 'none' }}
//             >
//               <div className='arrow-left' onClick={onWalletClick} style={{ display: isOpened ? 'block' : 'none' }}>âž¡</div>
//             </Html>
//           </primitive>
//           <primitive object={nodes.walletspine} />
//         </group>
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('/final_models/walletfinal.glb')