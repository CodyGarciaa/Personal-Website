/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { useSpring, useChain, useSpringRef, animated } from '@react-spring/three'
import DL_Face from '../faces/DL_Face.jsx'
import Bio_Details from '../faces/Bio_Details.jsx'
import '../css/Card.css'

export default function DL_Card({ onDLClick, DLClicked, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/final_models/DLfinal.glb')
  const { actions, names } = useAnimations(animations, group)
  const cardRef = useRef()

  useEffect(() => {
    actions['WalletOpenAnimation'].setLoop(THREE.LoopOnce, 1);
    actions['WalletOpenAnimation'].clampWhenFinished = true;
    actions['WalletOpenAnimation'].fadeIn(0.5).play()
  }, [])

  const [secTime, toggleSecTime] = useState();
  const [hovered, setHovered] = useState(false);

  const positionSpringRef = useSpringRef();
  const rotationSpringRef = useSpringRef();

  const positionSpring = useSpring({
    ref: positionSpringRef,
    pos: DLClicked ? [-7.081, 20, -1.709] : [-7.081, 0.626, -1.709],
    config: DLClicked ? { mass: 1, tension: 60, friction: 8 } : { mass: 1, tension: 50, friction: 20 },
  });

  const rotationSpring = useSpring({
    ref: rotationSpringRef,
    rot: DLClicked ? [THREE.MathUtils.degToRad(180), THREE.MathUtils.degToRad(210), THREE.MathUtils.degToRad(-90)] : [0, 0, THREE.MathUtils.degToRad(-90)],
  });

  useChain(DLClicked ? [positionSpringRef, rotationSpringRef] : [rotationSpringRef, positionSpringRef], [0, secTime]);

  const helper = () => {
    onDLClick();
    if (DLClicked) {              //time for pos to play after rot
      toggleSecTime(0.4);
    } else {                    //time for rot to play after pos
      toggleSecTime(0.9);
    }
  };

  const helpHover1 = () => {
    setHovered(!hovered);
    console.log('Pointer Enter: ', hovered);
  };
  console.log(hovered);

  const helpHover2 = () => {
    setHovered(!hovered);
    console.log('Pointer Leave: ', hovered);
  };

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" onClick={DLClicked ? '' : helper} onPointerEnter={helpHover1} onPointerLeave={helpHover2} >
        <animated.group
          name="ArmatureWallet"
          position={positionSpring.pos}
          rotation={rotationSpring.rot}
          >
          <skinnedMesh
            ref={cardRef}
            name="DL_Card"
            geometry={nodes.DL_Card.geometry}
            material={materials.DL_Material}
            skeleton={nodes.DL_Card.skeleton}
          />
          <primitive object={nodes.walletstay} />
          <primitive object={nodes.walletspine}>
            <primitive object={nodes.walletopen}>
              <Html
                occlude="blending"
                wrapperClass="nodes"
                position={[2.4, 7, 1.13]}
                transform
                distanceFactor={8}
                rotation-x={THREE.MathUtils.degToRad(-1.4)}
                rotation-z={THREE.MathUtils.degToRad(-90)}
                style={{ pointerEvents: 'none' }}
              >
                <DL_Face />
              </Html>

              <Html
                occlude="blending"
                wrapperClass="nodes"
                position={[2.4, 7, 1]}
                transform
                distanceFactor={8}
                rotation-x={THREE.MathUtils.degToRad(178.75)}
                rotation-z={THREE.MathUtils.degToRad(90)}
                style={{ pointerEvents: 'none' }}
              >
                <Bio_Details />
              </Html>

              <Html
                occlude="blending"
                wrapperClass="nodes"
                position={[4.5, 7, 0.5]}
                transform
                distanceFactor={30}
                rotation-x={THREE.MathUtils.degToRad(178.75)}
                rotation-z={THREE.MathUtils.degToRad(90)}
                style={{ pointerEvents: 'none' }}
              >
                <div>âŒ„</div>
              </Html>
            </primitive>
          </primitive>

        </animated.group>
      </group>
    </group>
  )
}

useGLTF.preload('/final_models/DLfinal.glb')