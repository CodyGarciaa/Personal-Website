

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { useSpring, useChain, useSpringRef, animated } from '@react-spring/three'
import Project_Details from './Project_Details'
import Project_Card_Face from './Project_Card_Face'

export default function Project1_Card({ isOpened, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/final_models/Proj1final.glb')

  const [clicked, toggleClick] = useState(false);
  const [secTime, toggleSecTime] = useState();

  const positionSpringRef = useSpringRef();
  const rotationSpringRef = useSpringRef();

  const positionSpring = useSpring({
    ref: positionSpringRef,
    pos: clicked ? [20, -0.3, -0.93] : [-0.01, 0, -0.758],
    config: clicked ? { mass: 1, tension: 60, friction: 8 } : { mass: 1, tension: 50, friction: 20 },
  });

  const rotationSpring = useSpring({
    ref: rotationSpringRef,
    rot: clicked ? [0, THREE.MathUtils.degToRad(900), 0] : [0, 0, 0],
  });

  useChain(clicked ? [positionSpringRef, rotationSpringRef] : [rotationSpringRef, positionSpringRef], [0, secTime]);

  const helper = () => {
    if(isOpened) {
      console.log('clicked 5');
      if (clicked) {              //time for pos to play after rot
        toggleSecTime(0.4);
      } else {                    //time for rot to play after pos
        toggleSecTime(0.9);
      }
      toggleClick(!clicked);
    }
  };
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene" onClick={helper}>
        <animated.group name="ArmatureSleeve" position={[-0.01, 0, -0.758]}>
          <skinnedMesh
            name="Proj1Card"
            geometry={nodes.Proj1Card.geometry}
            material={materials.Project_Material}
            skeleton={nodes.Proj1Card.skeleton}
          />
          <primitive object={nodes.firstfold} />
          <primitive object={nodes.firstsleeve}>
            <Html
              occlude="blending"
              wrapperClass="nodes"
              position={[-4.1, 2.67, 0.26]}
              transform
              distanceFactor={8.2}
              rotation-y={THREE.MathUtils.degToRad(1.03)}
              style={{ pointerEvents: 'none' }}
            >
              <Project_Card_Face number={1} />
            </Html>
            <Html
              occlude="blending"
              wrapperClass="nodes"
              position={[-4.1, 2.67, 0.1]}
              transform
              distanceFactor={8.2}
              rotation-y={THREE.MathUtils.degToRad(181.03)}
              style={{ pointerEvents: 'none' }}
            >
              <Project_Details />
            </Html>
          </primitive>
        </animated.group>
      </group>
    </group>
  )
}

useGLTF.preload('/final_models/Proj1final.glb')